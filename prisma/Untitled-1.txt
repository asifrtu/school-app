// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id       String            @id @default(uuid())
  name     String            @unique
  module   String?
  roles    RolePermission[]
}

model RolePermission {
  id           String       @id @default(uuid())
  roleId       String
  permissionId String
  role         Role         @relation(fields: [roleId], references: [id])
  permission   Permission   @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}
enum Status {
  ACTIVE
  INACTIVE
}
model User {
  id                  Int     @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String    @unique
  phoneNumber         String    @unique
  password            String
  role                Role
  status              Status
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  // One-to-many or optional one-to-one
  studentAcademic     StudentAcademicInfo[]
  student             Student?
  teacher             Teacher?
  teacherAcademic     TeacherAcademicDInfo?
  parentAsParent      Parent?
  parentAsStudent     Parent[] @relation("Children")
}

model Parent {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique
  parent             User    @relation(fields: [userId], references: [id])
  fatherOccupation   String?
  motherName         String?
  motherOccupation   String?
  phoneNumber        String?   @unique
  address            String?
  notes              String?
  deletedAt          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  children           User[]   @relation("Children")
}

model StudentAcademicInfo {
  id                 Int     @id @default(autoincrement())
  userId             Int
  user               User    @relation(fields: [userId], references: [id])
  sessionId          Int
  session            Session @relation(fields: [sessionId], references: [id])
  classId            Int
  class              Class   @relation(fields: [classId], references: [id])
  rollNo             String
}

model Student {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique
  user               User    @relation(fields: [userId], references: [id])
  parentId           Int
  parent             Parent  @relation(fields: [parentId], references: [userId])
  admissionDate      DateTime
  dateOfBirth        DateTime?
  gender             String
  religion           String?
  caste              String?
  bloodGroup         String?
  disability         String?
  disease            String?
  guardianName       String?
  emergencyContact   String?
  address1           String?
  address2           String?
  notes              String?
  image              String?
  deletedAt          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  attendance         Attendance[]
  fees               Fee[]
}

model Teacher {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique
  user               User    @relation(fields: [userId], references: [id])
  joiningDate        DateTime
  dateOfBirth        DateTime?
  gender             String
  religion           String?
  caste              String?
  bloodGroup         String?
  disease            String?
  fatherName         String?
  fatherOccupation   String?
  motherName         String?
  motherOccupation   String?
  address1           String
  address2           String?
  notes              String?
  image              String?
  deletedAt          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model TeacherAcademicDInfo {
  id                 Int     @id @default(autoincrement())
  userId             Int     
  user               User      @relation(fields: [userId], references: [id])
  classId            Int     
  class              Class      @relation(fields: [userId], references: [id])
  deletedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  // many to many
  classAssign        Class   @relation("ClassesAssign")
  subject            Subject[] @relation("SubjectAssign")
}


model Session {
  id                 String @id @default(uuid())
  name               String
  shortCode          String
  teacherName        String
  description        String
  createdAt          DateTime @default(now())
  student            StudentAcademicInfo[]  
  teacher            TeacherAcademicDInfo[]  
}

model Class   {
  id                 String @id @default(uuid())
  name               String
  createdAt          DateTime @default(now())
  student            StudentAcademicInfo[]
  teacher            TeacherAcademicDInfo[]
}

model Section {
  id         String @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  fullMarks Int
  passMarks Int
  code      String
  teacher   String
  createdAt DateTime @default(now())
  teacher   TeacherAcademicDInfo[]
  lession   Lession[]
  topic     Topic[]
}

model Lession {
  subjectId  String @id
  subject    Subject @relation(fields: [subjectId], references: [id])
  name       String
  lecture    String
  deletedAt  DateTime?  // nullable by default
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Topic {
  lessionId  String @id
  lession    Lession @relation(fields: [lessionId], references: [subjectId])
  name       String
  deletedAt  DateTime?  // nullable by default
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LectureAssign {
  id         String @id @default(uuid())
  subjectId  String @unique
  subject    Subject @relation(fields: [subjectId], references: [id])
  lessionId  String @unique
  lession    Lession @relation(fields: [lessionId], references: [subjectId])
  topicId    String @unique
  topic      Topic @relation(fields: [topicId], references: [lessionId])
  alloted    String
  remaining  String
  deletedAt  DateTime?  // nullable by default
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Result {
  id                 String @id @default(uuid())
  deletedAt          DateTime?  // nullable by default
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Event {
  // for now
}

model Timetable {
  id        String   @id @default(uuid())
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id])
  day       String   // e.g., "Monday"
  startTime DateTime
  endTime   DateTime
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [userId])
  date      DateTime
  status    AttendanceStatus
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}


model Fee {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [userId])
  amount    Float
  status    FeeStatus
  dueDate   DateTime
  paidOn    DateTime?
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  message     String
  audience    Audience
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
}

enum Audience {
  ALL
  TEACHERS
  STUDENTS
  PARENTS
}
model Testing {
  id          String   @id @default(uuid())
  firstName   String?
  lastName    String?
  email       String?
  image       String?   // path like /uploads/xxxx.png
  deletedAt   DateTime?  // nullable by default
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

